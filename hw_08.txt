-- первое задание 

ALTER TABLE communities_users
  ADD CONSTRAINT communities_users_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
     ;
     
ALTER TABLE friendship
  ADD CONSTRAINT friendship_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
      ,
  ADD CONSTRAINT friendship_friend_id_fk 
    FOREIGN KEY (friend_id) REFERENCES users(id)
      ,
  ADD CONSTRAINT friendship_status_id_fk 
    FOREIGN KEY (status_id) REFERENCES friendship_statuses(id)
;   

ALTER TABLE likes
  ADD CONSTRAINT likes_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
    ,
  ADD CONSTRAINT likes_target_type_id_fk 
    FOREIGN KEY (target_type_id) REFERENCES target_types(id)
        
;

ALTER TABLE media
  ADD CONSTRAINT media_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users (id)
  ,
  ADD CONSTRAINT media_media_type_id_fk 
    FOREIGN KEY (media_type_id) REFERENCES media_types(id)
       
;
     
ALTER TABLE messages
  ADD CONSTRAINT messages_from_user_id_fk 
    FOREIGN KEY (from_user_id) REFERENCES users(id)
    ,
  ADD CONSTRAINT messages_to_user_id_fk 
    FOREIGN KEY (to_user_id) REFERENCES users(id)
;

ALTER TABLE posts
  ADD CONSTRAINT posts_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
    ,    
  ADD CONSTRAINT posts_media_id_fk 
    FOREIGN KEY (media_id) REFERENCES media(id)
    
    
;

ALTER TABLE users
  ADD CONSTRAINT users_id_fk 
    FOREIGN KEY (id) REFERENCES profiles(user_id) 
      
;      

ALTER TABLE profiles
  ADD CONSTRAINT profiles_photo_id_fk
    FOREIGN KEY (photo_id) REFERENCES media(id)
      ;
     
ALTER TABLE communities_users
  ADD CONSTRAINT communities_users_id_fk
    FOREIGN KEY (community_id) REFERENCES communities(id)
      ;
	  
3 задание 

-- Пусть задан некоторый пользователь. 
-- Из всех друзей этого пользователя найдите человека, который больше всех общался с нашим пользователем.

   
SELECT messages.from_user_id , COUNT(*) AS SM
  FROM users
    JOIN messages
      ON users.id = messages.to_user_id
        OR users.id = messages.from_user_id
   JOIN friendship
      ON (users.id = friendship.user_id OR users.id = friendship.friend_id)
      AND friendship.status_id = 1
  WHERE users.id = 10
 GROUP BY  from_user_id 
 ORDER BY SM DESC lIMIT 1
  ;
 
-- Подсчитать общее количество лайков, которые получили 10 самых молодых пользователей. 
 
SELECT SUM(total_likes) AS summ_likes 
FROM 
(SELECT profiles.user_id ,likes.target_id, profiles.birthday , COUNT(DISTINCT(likes.id)) AS total_likes
  FROM  likes 
  JOIN profiles
    ON profiles.user_id = target_id
  WHERE target_type_id = 2 
  GROUP BY target_id
  ORDER BY birthday DESC LIMIT 10) AS count_like 
 
--   Определить кто больше поставил лайков (всего) - мужчины или женщины?



(SELECT COUNT(DISTINCT(likes.user_id)) AS f_likes_count
  FROM likes 
    JOIN profiles
    ON profiles.user_id = likes.user_id 
WHERE profiles.sex = 'f') AS f_like , 

(SELECT COUNT(DISTINCT(likes.user_id)) AS m_likes_count
  FROM likes 
   JOIN profiles
    ON profiles.user_id = likes.user_id 
WHERE profiles.sex = 'm') AS m_like
;








































  
	  